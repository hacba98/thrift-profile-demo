/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Profile_TYPES_H
#define Profile_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>




struct ErrorCode {
  enum type {
    SUCCESS = 0,
    USER_NOT_FOUND = 1,
    INVALID_PARAMETERS = 2,
    INTERNAL_ERROR = 3
  };
};

extern const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ErrorCode::type& val);

class Profile;

class dateInput;

class InputProfileData;

class GetProfileResult;

typedef struct _Profile__isset {
  _Profile__isset() : _id(false), name(false), isMale(false), birthDate(false), lastActiveTime(false), registerTime(false) {}
  bool _id :1;
  bool name :1;
  bool isMale :1;
  bool birthDate :1;
  bool lastActiveTime :1;
  bool registerTime :1;
} _Profile__isset;

class Profile : public virtual ::apache::thrift::TBase {
 public:

  Profile(const Profile&);
  Profile& operator=(const Profile&);
  Profile() : _id(0), name(), isMale(0), birthDate(0), lastActiveTime(0), registerTime(0) {
  }

  virtual ~Profile() throw();
  int32_t _id;
  std::string name;
  bool isMale;
  int32_t birthDate;
  int32_t lastActiveTime;
  int32_t registerTime;

  _Profile__isset __isset;

  void __set__id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_isMale(const bool val);

  void __set_birthDate(const int32_t val);

  void __set_lastActiveTime(const int32_t val);

  void __set_registerTime(const int32_t val);

  bool operator == (const Profile & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(isMale == rhs.isMale))
      return false;
    if (!(birthDate == rhs.birthDate))
      return false;
    if (!(lastActiveTime == rhs.lastActiveTime))
      return false;
    if (!(registerTime == rhs.registerTime))
      return false;
    return true;
  }
  bool operator != (const Profile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Profile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Profile &a, Profile &b);

std::ostream& operator<<(std::ostream& out, const Profile& obj);

typedef struct _dateInput__isset {
  _dateInput__isset() : dateString(false), dateInt(false) {}
  bool dateString :1;
  bool dateInt :1;
} _dateInput__isset;

class dateInput : public virtual ::apache::thrift::TBase {
 public:

  dateInput(const dateInput&);
  dateInput& operator=(const dateInput&);
  dateInput() : dateString(), dateInt(0) {
  }

  virtual ~dateInput() throw();
  std::string dateString;
  int32_t dateInt;

  _dateInput__isset __isset;

  void __set_dateString(const std::string& val);

  void __set_dateInt(const int32_t val);

  bool operator == (const dateInput & rhs) const
  {
    if (__isset.dateString != rhs.__isset.dateString)
      return false;
    else if (__isset.dateString && !(dateString == rhs.dateString))
      return false;
    if (__isset.dateInt != rhs.__isset.dateInt)
      return false;
    else if (__isset.dateInt && !(dateInt == rhs.dateInt))
      return false;
    return true;
  }
  bool operator != (const dateInput &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dateInput & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(dateInput &a, dateInput &b);

std::ostream& operator<<(std::ostream& out, const dateInput& obj);

typedef struct _InputProfileData__isset {
  _InputProfileData__isset() : name(false), isMale(false), birthDate(false) {}
  bool name :1;
  bool isMale :1;
  bool birthDate :1;
} _InputProfileData__isset;

class InputProfileData : public virtual ::apache::thrift::TBase {
 public:

  InputProfileData(const InputProfileData&);
  InputProfileData& operator=(const InputProfileData&);
  InputProfileData() : name(), isMale(0) {
  }

  virtual ~InputProfileData() throw();
  std::string name;
  bool isMale;
  dateInput birthDate;

  _InputProfileData__isset __isset;

  void __set_name(const std::string& val);

  void __set_isMale(const bool val);

  void __set_birthDate(const dateInput& val);

  bool operator == (const InputProfileData & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(isMale == rhs.isMale))
      return false;
    if (!(birthDate == rhs.birthDate))
      return false;
    return true;
  }
  bool operator != (const InputProfileData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InputProfileData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InputProfileData &a, InputProfileData &b);

std::ostream& operator<<(std::ostream& out, const InputProfileData& obj);

typedef struct _GetProfileResult__isset {
  _GetProfileResult__isset() : data(false) {}
  bool data :1;
} _GetProfileResult__isset;

class GetProfileResult : public virtual ::apache::thrift::TBase {
 public:

  GetProfileResult(const GetProfileResult&);
  GetProfileResult& operator=(const GetProfileResult&);
  GetProfileResult() : code((ErrorCode::type)0) {
  }

  virtual ~GetProfileResult() throw();
  ErrorCode::type code;
  Profile data;

  _GetProfileResult__isset __isset;

  void __set_code(const ErrorCode::type val);

  void __set_data(const Profile& val);

  bool operator == (const GetProfileResult & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const GetProfileResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetProfileResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetProfileResult &a, GetProfileResult &b);

std::ostream& operator<<(std::ostream& out, const GetProfileResult& obj);



#endif
