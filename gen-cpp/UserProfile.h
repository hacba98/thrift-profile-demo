/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef UserProfile_H
#define UserProfile_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "Profile_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class UserProfileIf {
 public:
  virtual ~UserProfileIf() {}
  virtual int32_t CreateUser(const InputProfileData& profile) = 0;
  virtual void GetUser(GetProfileResult& _return, const int32_t _id) = 0;
  virtual ErrorCode::type UpdateUser(const int32_t _id, const InputProfileData& updateData) = 0;
  virtual ErrorCode::type RemoveUser(const int32_t _id) = 0;
};

class UserProfileIfFactory {
 public:
  typedef UserProfileIf Handler;

  virtual ~UserProfileIfFactory() {}

  virtual UserProfileIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(UserProfileIf* /* handler */) = 0;
};

class UserProfileIfSingletonFactory : virtual public UserProfileIfFactory {
 public:
  UserProfileIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<UserProfileIf>& iface) : iface_(iface) {}
  virtual ~UserProfileIfSingletonFactory() {}

  virtual UserProfileIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(UserProfileIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<UserProfileIf> iface_;
};

class UserProfileNull : virtual public UserProfileIf {
 public:
  virtual ~UserProfileNull() {}
  int32_t CreateUser(const InputProfileData& /* profile */) {
    int32_t _return = 0;
    return _return;
  }
  void GetUser(GetProfileResult& /* _return */, const int32_t /* _id */) {
    return;
  }
  ErrorCode::type UpdateUser(const int32_t /* _id */, const InputProfileData& /* updateData */) {
    ErrorCode::type _return = (ErrorCode::type)0;
    return _return;
  }
  ErrorCode::type RemoveUser(const int32_t /* _id */) {
    ErrorCode::type _return = (ErrorCode::type)0;
    return _return;
  }
};

typedef struct _UserProfile_CreateUser_args__isset {
  _UserProfile_CreateUser_args__isset() : profile(false) {}
  bool profile :1;
} _UserProfile_CreateUser_args__isset;

class UserProfile_CreateUser_args {
 public:

  UserProfile_CreateUser_args(const UserProfile_CreateUser_args&);
  UserProfile_CreateUser_args& operator=(const UserProfile_CreateUser_args&);
  UserProfile_CreateUser_args() {
  }

  virtual ~UserProfile_CreateUser_args() throw();
  InputProfileData profile;

  _UserProfile_CreateUser_args__isset __isset;

  void __set_profile(const InputProfileData& val);

  bool operator == (const UserProfile_CreateUser_args & rhs) const
  {
    if (!(profile == rhs.profile))
      return false;
    return true;
  }
  bool operator != (const UserProfile_CreateUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserProfile_CreateUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserProfile_CreateUser_pargs {
 public:


  virtual ~UserProfile_CreateUser_pargs() throw();
  const InputProfileData* profile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserProfile_CreateUser_result__isset {
  _UserProfile_CreateUser_result__isset() : success(false) {}
  bool success :1;
} _UserProfile_CreateUser_result__isset;

class UserProfile_CreateUser_result {
 public:

  UserProfile_CreateUser_result(const UserProfile_CreateUser_result&);
  UserProfile_CreateUser_result& operator=(const UserProfile_CreateUser_result&);
  UserProfile_CreateUser_result() : success(0) {
  }

  virtual ~UserProfile_CreateUser_result() throw();
  int32_t success;

  _UserProfile_CreateUser_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const UserProfile_CreateUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UserProfile_CreateUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserProfile_CreateUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserProfile_CreateUser_presult__isset {
  _UserProfile_CreateUser_presult__isset() : success(false) {}
  bool success :1;
} _UserProfile_CreateUser_presult__isset;

class UserProfile_CreateUser_presult {
 public:


  virtual ~UserProfile_CreateUser_presult() throw();
  int32_t* success;

  _UserProfile_CreateUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserProfile_GetUser_args__isset {
  _UserProfile_GetUser_args__isset() : _id(false) {}
  bool _id :1;
} _UserProfile_GetUser_args__isset;

class UserProfile_GetUser_args {
 public:

  UserProfile_GetUser_args(const UserProfile_GetUser_args&);
  UserProfile_GetUser_args& operator=(const UserProfile_GetUser_args&);
  UserProfile_GetUser_args() : _id(0) {
  }

  virtual ~UserProfile_GetUser_args() throw();
  int32_t _id;

  _UserProfile_GetUser_args__isset __isset;

  void __set__id(const int32_t val);

  bool operator == (const UserProfile_GetUser_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const UserProfile_GetUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserProfile_GetUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserProfile_GetUser_pargs {
 public:


  virtual ~UserProfile_GetUser_pargs() throw();
  const int32_t* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserProfile_GetUser_result__isset {
  _UserProfile_GetUser_result__isset() : success(false) {}
  bool success :1;
} _UserProfile_GetUser_result__isset;

class UserProfile_GetUser_result {
 public:

  UserProfile_GetUser_result(const UserProfile_GetUser_result&);
  UserProfile_GetUser_result& operator=(const UserProfile_GetUser_result&);
  UserProfile_GetUser_result() {
  }

  virtual ~UserProfile_GetUser_result() throw();
  GetProfileResult success;

  _UserProfile_GetUser_result__isset __isset;

  void __set_success(const GetProfileResult& val);

  bool operator == (const UserProfile_GetUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UserProfile_GetUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserProfile_GetUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserProfile_GetUser_presult__isset {
  _UserProfile_GetUser_presult__isset() : success(false) {}
  bool success :1;
} _UserProfile_GetUser_presult__isset;

class UserProfile_GetUser_presult {
 public:


  virtual ~UserProfile_GetUser_presult() throw();
  GetProfileResult* success;

  _UserProfile_GetUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserProfile_UpdateUser_args__isset {
  _UserProfile_UpdateUser_args__isset() : _id(false), updateData(false) {}
  bool _id :1;
  bool updateData :1;
} _UserProfile_UpdateUser_args__isset;

class UserProfile_UpdateUser_args {
 public:

  UserProfile_UpdateUser_args(const UserProfile_UpdateUser_args&);
  UserProfile_UpdateUser_args& operator=(const UserProfile_UpdateUser_args&);
  UserProfile_UpdateUser_args() : _id(0) {
  }

  virtual ~UserProfile_UpdateUser_args() throw();
  int32_t _id;
  InputProfileData updateData;

  _UserProfile_UpdateUser_args__isset __isset;

  void __set__id(const int32_t val);

  void __set_updateData(const InputProfileData& val);

  bool operator == (const UserProfile_UpdateUser_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(updateData == rhs.updateData))
      return false;
    return true;
  }
  bool operator != (const UserProfile_UpdateUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserProfile_UpdateUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserProfile_UpdateUser_pargs {
 public:


  virtual ~UserProfile_UpdateUser_pargs() throw();
  const int32_t* _id;
  const InputProfileData* updateData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserProfile_UpdateUser_result__isset {
  _UserProfile_UpdateUser_result__isset() : success(false) {}
  bool success :1;
} _UserProfile_UpdateUser_result__isset;

class UserProfile_UpdateUser_result {
 public:

  UserProfile_UpdateUser_result(const UserProfile_UpdateUser_result&);
  UserProfile_UpdateUser_result& operator=(const UserProfile_UpdateUser_result&);
  UserProfile_UpdateUser_result() : success((ErrorCode::type)0) {
  }

  virtual ~UserProfile_UpdateUser_result() throw();
  ErrorCode::type success;

  _UserProfile_UpdateUser_result__isset __isset;

  void __set_success(const ErrorCode::type val);

  bool operator == (const UserProfile_UpdateUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UserProfile_UpdateUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserProfile_UpdateUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserProfile_UpdateUser_presult__isset {
  _UserProfile_UpdateUser_presult__isset() : success(false) {}
  bool success :1;
} _UserProfile_UpdateUser_presult__isset;

class UserProfile_UpdateUser_presult {
 public:


  virtual ~UserProfile_UpdateUser_presult() throw();
  ErrorCode::type* success;

  _UserProfile_UpdateUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserProfile_RemoveUser_args__isset {
  _UserProfile_RemoveUser_args__isset() : _id(false) {}
  bool _id :1;
} _UserProfile_RemoveUser_args__isset;

class UserProfile_RemoveUser_args {
 public:

  UserProfile_RemoveUser_args(const UserProfile_RemoveUser_args&);
  UserProfile_RemoveUser_args& operator=(const UserProfile_RemoveUser_args&);
  UserProfile_RemoveUser_args() : _id(0) {
  }

  virtual ~UserProfile_RemoveUser_args() throw();
  int32_t _id;

  _UserProfile_RemoveUser_args__isset __isset;

  void __set__id(const int32_t val);

  bool operator == (const UserProfile_RemoveUser_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const UserProfile_RemoveUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserProfile_RemoveUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserProfile_RemoveUser_pargs {
 public:


  virtual ~UserProfile_RemoveUser_pargs() throw();
  const int32_t* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserProfile_RemoveUser_result__isset {
  _UserProfile_RemoveUser_result__isset() : success(false) {}
  bool success :1;
} _UserProfile_RemoveUser_result__isset;

class UserProfile_RemoveUser_result {
 public:

  UserProfile_RemoveUser_result(const UserProfile_RemoveUser_result&);
  UserProfile_RemoveUser_result& operator=(const UserProfile_RemoveUser_result&);
  UserProfile_RemoveUser_result() : success((ErrorCode::type)0) {
  }

  virtual ~UserProfile_RemoveUser_result() throw();
  ErrorCode::type success;

  _UserProfile_RemoveUser_result__isset __isset;

  void __set_success(const ErrorCode::type val);

  bool operator == (const UserProfile_RemoveUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UserProfile_RemoveUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserProfile_RemoveUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserProfile_RemoveUser_presult__isset {
  _UserProfile_RemoveUser_presult__isset() : success(false) {}
  bool success :1;
} _UserProfile_RemoveUser_presult__isset;

class UserProfile_RemoveUser_presult {
 public:


  virtual ~UserProfile_RemoveUser_presult() throw();
  ErrorCode::type* success;

  _UserProfile_RemoveUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class UserProfileClient : virtual public UserProfileIf {
 public:
  UserProfileClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UserProfileClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t CreateUser(const InputProfileData& profile);
  void send_CreateUser(const InputProfileData& profile);
  int32_t recv_CreateUser();
  void GetUser(GetProfileResult& _return, const int32_t _id);
  void send_GetUser(const int32_t _id);
  void recv_GetUser(GetProfileResult& _return);
  ErrorCode::type UpdateUser(const int32_t _id, const InputProfileData& updateData);
  void send_UpdateUser(const int32_t _id, const InputProfileData& updateData);
  ErrorCode::type recv_UpdateUser();
  ErrorCode::type RemoveUser(const int32_t _id);
  void send_RemoveUser(const int32_t _id);
  ErrorCode::type recv_RemoveUser();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UserProfileProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<UserProfileIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (UserProfileProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_CreateUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RemoveUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UserProfileProcessor(::apache::thrift::stdcxx::shared_ptr<UserProfileIf> iface) :
    iface_(iface) {
    processMap_["CreateUser"] = &UserProfileProcessor::process_CreateUser;
    processMap_["GetUser"] = &UserProfileProcessor::process_GetUser;
    processMap_["UpdateUser"] = &UserProfileProcessor::process_UpdateUser;
    processMap_["RemoveUser"] = &UserProfileProcessor::process_RemoveUser;
  }

  virtual ~UserProfileProcessor() {}
};

class UserProfileProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UserProfileProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< UserProfileIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< UserProfileIfFactory > handlerFactory_;
};

class UserProfileMultiface : virtual public UserProfileIf {
 public:
  UserProfileMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<UserProfileIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UserProfileMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<UserProfileIf> > ifaces_;
  UserProfileMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<UserProfileIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t CreateUser(const InputProfileData& profile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreateUser(profile);
    }
    return ifaces_[i]->CreateUser(profile);
  }

  void GetUser(GetProfileResult& _return, const int32_t _id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetUser(_return, _id);
    }
    ifaces_[i]->GetUser(_return, _id);
    return;
  }

  ErrorCode::type UpdateUser(const int32_t _id, const InputProfileData& updateData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateUser(_id, updateData);
    }
    return ifaces_[i]->UpdateUser(_id, updateData);
  }

  ErrorCode::type RemoveUser(const int32_t _id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RemoveUser(_id);
    }
    return ifaces_[i]->RemoveUser(_id);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class UserProfileConcurrentClient : virtual public UserProfileIf {
 public:
  UserProfileConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UserProfileConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t CreateUser(const InputProfileData& profile);
  int32_t send_CreateUser(const InputProfileData& profile);
  int32_t recv_CreateUser(const int32_t seqid);
  void GetUser(GetProfileResult& _return, const int32_t _id);
  int32_t send_GetUser(const int32_t _id);
  void recv_GetUser(GetProfileResult& _return, const int32_t seqid);
  ErrorCode::type UpdateUser(const int32_t _id, const InputProfileData& updateData);
  int32_t send_UpdateUser(const int32_t _id, const InputProfileData& updateData);
  ErrorCode::type recv_UpdateUser(const int32_t seqid);
  ErrorCode::type RemoveUser(const int32_t _id);
  int32_t send_RemoveUser(const int32_t _id);
  ErrorCode::type recv_RemoveUser(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
