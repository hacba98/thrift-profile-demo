/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Profile_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _kErrorCodeValues[] = {
  ErrorCode::SUCCESS,
  ErrorCode::USER_NOT_FOUND,
  ErrorCode::INVALID_PARAMETERS,
  ErrorCode::INTERNAL_ERROR
};
const char* _kErrorCodeNames[] = {
  "SUCCESS",
  "USER_NOT_FOUND",
  "INVALID_PARAMETERS",
  "INTERNAL_ERROR"
};
const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kErrorCodeValues, _kErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ErrorCode::type& val) {
  std::map<int, const char*>::const_iterator it = _ErrorCode_VALUES_TO_NAMES.find(val);
  if (it != _ErrorCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


Profile::~Profile() throw() {
}


void Profile::__set__id(const int32_t val) {
  this->_id = val;
}

void Profile::__set_name(const std::string& val) {
  this->name = val;
}

void Profile::__set_isMale(const bool val) {
  this->isMale = val;
}

void Profile::__set_birthDate(const int32_t val) {
  this->birthDate = val;
}

void Profile::__set_lastActiveTime(const int32_t val) {
  this->lastActiveTime = val;
}

void Profile::__set_registerTime(const int32_t val) {
  this->registerTime = val;
}
std::ostream& operator<<(std::ostream& out, const Profile& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Profile::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->_id);
          this->__isset._id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isMale);
          this->__isset.isMale = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->birthDate);
          this->__isset.birthDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lastActiveTime);
          this->__isset.lastActiveTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->registerTime);
          this->__isset.registerTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Profile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Profile");

  xfer += oprot->writeFieldBegin("_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isMale", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->isMale);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("birthDate", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->birthDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastActiveTime", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->lastActiveTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("registerTime", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->registerTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Profile &a, Profile &b) {
  using ::std::swap;
  swap(a._id, b._id);
  swap(a.name, b.name);
  swap(a.isMale, b.isMale);
  swap(a.birthDate, b.birthDate);
  swap(a.lastActiveTime, b.lastActiveTime);
  swap(a.registerTime, b.registerTime);
  swap(a.__isset, b.__isset);
}

Profile::Profile(const Profile& other0) {
  _id = other0._id;
  name = other0.name;
  isMale = other0.isMale;
  birthDate = other0.birthDate;
  lastActiveTime = other0.lastActiveTime;
  registerTime = other0.registerTime;
  __isset = other0.__isset;
}
Profile& Profile::operator=(const Profile& other1) {
  _id = other1._id;
  name = other1.name;
  isMale = other1.isMale;
  birthDate = other1.birthDate;
  lastActiveTime = other1.lastActiveTime;
  registerTime = other1.registerTime;
  __isset = other1.__isset;
  return *this;
}
void Profile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Profile(";
  out << "_id=" << to_string(_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "isMale=" << to_string(isMale);
  out << ", " << "birthDate=" << to_string(birthDate);
  out << ", " << "lastActiveTime=" << to_string(lastActiveTime);
  out << ", " << "registerTime=" << to_string(registerTime);
  out << ")";
}


dateInput::~dateInput() throw() {
}


void dateInput::__set_dateString(const std::string& val) {
  this->dateString = val;
__isset.dateString = true;
}

void dateInput::__set_dateInt(const int32_t val) {
  this->dateInt = val;
__isset.dateInt = true;
}
std::ostream& operator<<(std::ostream& out, const dateInput& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t dateInput::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dateString);
          this->__isset.dateString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dateInt);
          this->__isset.dateInt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t dateInput::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("dateInput");

  if (this->__isset.dateString) {
    xfer += oprot->writeFieldBegin("dateString", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->dateString);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dateInt) {
    xfer += oprot->writeFieldBegin("dateInt", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->dateInt);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(dateInput &a, dateInput &b) {
  using ::std::swap;
  swap(a.dateString, b.dateString);
  swap(a.dateInt, b.dateInt);
  swap(a.__isset, b.__isset);
}

dateInput::dateInput(const dateInput& other2) {
  dateString = other2.dateString;
  dateInt = other2.dateInt;
  __isset = other2.__isset;
}
dateInput& dateInput::operator=(const dateInput& other3) {
  dateString = other3.dateString;
  dateInt = other3.dateInt;
  __isset = other3.__isset;
  return *this;
}
void dateInput::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "dateInput(";
  out << "dateString="; (__isset.dateString ? (out << to_string(dateString)) : (out << "<null>"));
  out << ", " << "dateInt="; (__isset.dateInt ? (out << to_string(dateInt)) : (out << "<null>"));
  out << ")";
}


InputProfileData::~InputProfileData() throw() {
}


void InputProfileData::__set_name(const std::string& val) {
  this->name = val;
}

void InputProfileData::__set_isMale(const bool val) {
  this->isMale = val;
}

void InputProfileData::__set_birthDate(const dateInput& val) {
  this->birthDate = val;
}
std::ostream& operator<<(std::ostream& out, const InputProfileData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t InputProfileData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isMale);
          this->__isset.isMale = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->birthDate.read(iprot);
          this->__isset.birthDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InputProfileData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InputProfileData");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isMale", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->isMale);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("birthDate", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->birthDate.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InputProfileData &a, InputProfileData &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.isMale, b.isMale);
  swap(a.birthDate, b.birthDate);
  swap(a.__isset, b.__isset);
}

InputProfileData::InputProfileData(const InputProfileData& other4) {
  name = other4.name;
  isMale = other4.isMale;
  birthDate = other4.birthDate;
  __isset = other4.__isset;
}
InputProfileData& InputProfileData::operator=(const InputProfileData& other5) {
  name = other5.name;
  isMale = other5.isMale;
  birthDate = other5.birthDate;
  __isset = other5.__isset;
  return *this;
}
void InputProfileData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InputProfileData(";
  out << "name=" << to_string(name);
  out << ", " << "isMale=" << to_string(isMale);
  out << ", " << "birthDate=" << to_string(birthDate);
  out << ")";
}


GetProfileResult::~GetProfileResult() throw() {
}


void GetProfileResult::__set_code(const ErrorCode::type val) {
  this->code = val;
}

void GetProfileResult::__set_data(const Profile& val) {
  this->data = val;
}
std::ostream& operator<<(std::ostream& out, const GetProfileResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetProfileResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_code = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast6;
          xfer += iprot->readI32(ecast6);
          this->code = (ErrorCode::type)ecast6;
          isset_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetProfileResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetProfileResult");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetProfileResult &a, GetProfileResult &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

GetProfileResult::GetProfileResult(const GetProfileResult& other7) {
  code = other7.code;
  data = other7.data;
  __isset = other7.__isset;
}
GetProfileResult& GetProfileResult::operator=(const GetProfileResult& other8) {
  code = other8.code;
  data = other8.data;
  __isset = other8.__isset;
  return *this;
}
void GetProfileResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetProfileResult(";
  out << "code=" << to_string(code);
  out << ", " << "data=" << to_string(data);
  out << ")";
}


