// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "UserProfile.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class UserProfileHandler : virtual public UserProfileIf {
 public:
  UserProfileHandler() {
    // Your initialization goes here
  }

  int32_t CreateUser(const InputProfileData& profile) {
    // Your implementation goes here
    printf("CreateUser\n");
  }

  void GetUser(GetProfileResult& _return, const int32_t _id) {
    // Your implementation goes here
    printf("GetUser\n");
  }

  ErrorCode::type UpdateUser(const int32_t _id, const InputProfileData& updateData) {
    // Your implementation goes here
    printf("UpdateUser\n");
  }

  ErrorCode::type RemoveUser(const int32_t _id) {
    // Your implementation goes here
    printf("RemoveUser\n");
  }

};

int main2(int argc, char **argv) {
  int port = 9090;
  shared_ptr<UserProfileHandler> handler(new UserProfileHandler());
  shared_ptr<TProcessor> processor(new UserProfileProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

